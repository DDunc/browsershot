#!/usr/bin/env node
var join = require('path').join;
var lodash = require('lodash');
var fs = require('fs');

var createFilenameMaker = require('../lib/filename');

var client = lodash.memoize(createClient);

var snap = {
  handler: function (args) {
    var urls = args.url || [];

    var filenameMaker = createFilenameMaker(args.filename);

    if (args['input-file']) {
      var inputs = fs.readFileSync(args['input-file']).toString().split(/(?:\r\n|[\r\n])/);
      urls = urls.concat( lodash.compact(inputs) );
    }

    if (urls.length === 0) {
      console.log('No urls to snap ðŸ˜ž');
      process.exit(0);
    }

    client(args)
      .snap({ urls: urls, outputDir: args['output-dir'], filenameMaker: filenameMaker, widths: args.widths })
      .then(function () {
        console.log('Done, destroying backend instance');
        return client(args).destroy();
      });
  },
  builder: function (yargs) {
    return yargs
      .strict()
      .option('url', {
        alias: 'u',
        describe: 'urls to snap',
        array: true
      })
      .option('widths', {
        alias: 'w',
        describe: 'widths to set viewport to',
        default: 1024,
        array: true
      })
      .option('input-file', {
        alias: 'i',
        describe: 'file containing a list of URLs, one URL per line'
      })
      .option('filename', {
        alias: 'f',
        describe: 'a pattern for parsing the filename. Also, any property returned by node\'s url.parse() can be used as a placeholder e.g. {host}. The values {date} and {timestamp} are also available.',
        default: 'screenshot-{url}-{width}.png'
      });
  }
};

function createClient(args) {
  var api = getBackend(args.backend);
  return api({
    username: args.username,
    key     : args.key
  }, args);
}

function listBrowsers(args) {
  client(args)
    .list()
    .then(
      console.log.bind(console),
      console.error.bind(console)
    );
}

function destroy(args) {
  client(args).destroy();
}

function getBackend(backend) {
  return require('../lib/' + backend);
}

// Do the magic
var args = require('yargs')
  .usage('$0 [general options] <cmd> [command options]')
  .config('config') // --config loads JSON
  .global(['config', 'output-dir', 'username', 'key', 'backend', 'local']) // expose these args to subcommands
  .completion()
  .option('backend', {
    alias: 'b',
    demand: true,
    describe: 'which backend to use to fetch the screenshots',
    choices: ['browserstack-automate' /*, 'browserstack-live', 'browserstack-screenshot', 'phantomjs'*/]
  })
  .option('username', {
    alias: 'un',
    describe: 'username'
  })
  .option('key', {
    alias: 'k',
    describe: 'API key',
  })
  .option('local', {
    alias: 'l',
    describe: 'enable local URL testing',
    default: false
  })
  .option('output-dir', {
    alias: 'o',
    describe: 'directory to save screenshots',
    default: process.cwd(),
  })
  .command('list', 'list available browsers', { handler: listBrowsers, builder: {} })
  .command('snap', 'take a screenshots', snap)
  .command('destroy', 'force underlying backend to destroy', { handler: destroy, builder: {} })
  .help('help')
  .strict() // Any command-line argument given that is not demanded, or does not have a corresponding description, will be reported as an error.
  .argv;
